# # 1. Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод init()),
# # который должен принимать данные (список списков) для формирования матрицы.
# # Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
# # Примеры матриц вы найдете в методичке.
# # Следующий шаг — реализовать перегрузку метода str() для вывода матрицы в привычном виде.
# # Далее реализовать перегрузку метода add() для реализации операции сложения двух объектов класса Matrix
# # (двух матриц). Результатом сложения должна быть новая матрица.
# # Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки первой матрицы
# # складываем с первым элементом первой строки второй матрицы и т.д.
#
# class Matrix:
#     def __init__(self, lists):
#         self.lists = lists
#
#
#     def __str__(self):
#         print(self.lists)
#
#
#     def __add__(self, other):
#         for list_1, list_2 in zip(self.lists, other.lists):
#             new = [sum(i) for i in zip(list_1, list_2)]
#             print(new)
#
# matr1 = Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
# matr2 = Matrix([[2, 3, 4], [5, 6, 7], [8, 9, 10]])
# print(matr1 + matr2)

# 2. Реализовать проект расчета суммарного расхода ткани на производство одежды. Основная
# сущность (класс) этого проекта — одежда, которая может иметь определенное название. К
# типам одежды в этом проекте относятся пальто и костюм. У этих типов одежды существуют
# параметры: размер (для пальто) и рост (для костюма). Это могут быть обычные числа: V и H,
# соответственно.
# Для определения расхода ткани по каждому типу одежды использовать формулы: для пальто
# (V/6.5 + 0.5), для костюма (2 * H + 0.3). Проверить работу этих методов на реальных данных.
# Реализовать общий подсчет расхода ткани. Проверить на практике полученные на этом уроке
# знания: реализовать абстрактные классы для основных классов проекта, проверить на практике
# работу декоратора @property.

# class Clothes:
#     def __init__(self, coat, costume):
#         self.square = coat + costume
#
# class Item:
#     def __init__(self, v, h):
#         self.v = v / 6.5 + 0.5
#         self.h = 2 * h + 0.3
#         self.i = []
#
#     def __str__(self):
#         return f'Площадь костюмов равна {self.v.__round__(2)}, площадь пальто равна {self.h.__round__(2)}'
#
#     @property
#     def square(self):
#         return f'Общая площадь ткани равна {(self.v + self.h).__round__(2)}'
#
#     def add_clothes(self):
#         self.i.append(Clothes(self.v, self.h))
#
# n = Item(5, 10)
# print(n.square)

# 3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (add()),
# вычитание (sub()), умножение (mul()), деление (truediv()).Данные методы должны применяться только
# к клеткам и выполнять увеличение, уменьшение, умножение и обычное (не целочисленное) деление клеток,
# соответственно. В методе деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек
# исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек
# двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение
# количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное
# деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек
# в ряду. Данный метод позволяет организовать ячейки по рядам. Метод должен возвращать строку вида
# **\n\n***..., где количество ячеек между \n равно переданному
# аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order()
# вернет строку: **\n\n.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет
# строку: **\n\n***.

class Cell:
    def __init__(self, count):
        self.count = int(count)

    def
